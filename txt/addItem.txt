import React, { useEffect, useState } from "react";
import uuid from "react-native-uuid";
import { Text, View, TextInput, Button, StyleSheet, Image } from "react-native";
import { SelectList } from "react-native-dropdown-select-list";
import AsyncStorage from "@react-native-async-storage/async-storage";
import * as ImagePicker from "expo-image-picker";

export default function AddItem() {
  const id = uuid.v4();
  
  const [itemName, setItemName] = useState("");
  const [quantity, setQuantity] = useState("");
  const [category, setCategory] = useState("");
  const [categories, setCategories] = useState([]);
  const [image, setImage] = useState(null);

  useEffect(() => {
    loadCategory();
  }, []);

  const loadCategory = async () => {
    try {
      const storedCategories = await AsyncStorage.getItem("Categories");
      if (storedCategories) {
        setCategories(JSON.parse(storedCategories));
      }
      categories.map((category) => {
        setCategory({
          key: id,
          value: category,
        });
      });
    } catch (error) {
      console.error("Error loading categories from AsyncStorage: ", error);
    }
  };

  const handleSubmit = async () => {
    try {
      const newItem = {
        id,
        name: itemName,
        quantity,
        category,
        image,
      };

      // Save the item data to AsyncStorage
      await AsyncStorage.setItem("Items", JSON.stringify(newItem));

      console.log("Item data saved successfully!");
    } catch (error) {
      console.error("Error saving item data:", error);
    }
  };

  const pickImage = async () => {
    // No permissions request is necessary for launching the image library
    let result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.All,
      allowsEditing: true,
      aspect: [4, 3],
      quality: 1,
    });

    if (!result.canceled) {
      setImage(result.assets[0]);
    }
  };

  const styles = StyleSheet.create({
    input: {
      height: 45,
      borderColor: "gray",
      borderWidth: 1,
      marginBottom: 10,
      paddingHorizontal: 10,
      borderRadius: 10,
      paddingLeft: 20,
    },
    imageContainer: {
      alignItems: "center", 
      marginBottom: 20, 
    },
    image: {
      width: 200,
      height: 200, 
      resizeMode: "cover", 
      borderRadius: 10, 
    },
  });

  return (
    <View style={{ padding: 20 }}>
      <Text style={{ fontSize: 20, marginBottom: 10 }}>Add Item</Text>
      <TextInput
        style={styles.input}
        placeholder="Item Name"
        value={itemName}
        onChangeText={(item) => setItemName(item)}
        placeholderTextColor={"black"}
      />
      <TextInput
        style={styles.input}
        placeholder="Quantity"
        value={quantity}
        onChangeText={(text) => setQuantity(text)}
        keyboardType="numeric"
        placeholderTextColor={"black"}
      />
      <SelectList
        save="value"
        label="Category"
        placeholder="Select Category"
        setSelected={(val) => setCategory(val)}
        data={categories}
        search={false}
        // boxStyles={{ marginBottom: 5 }}
        // dropdownStyles={{ marginBottom: 5 }}
      />
      <View style={{ marginBottom: 10, marginTop: 10 }}>
        <Button title="Select Image" onPress={pickImage} />
        {image && (
          <View style={styles.imageContainer}>
            <Image source={image} style={styles.image} />
          </View>
        )}
      </View>
      <Button title="Add Item" onPress={handleSubmit} />
    </View>
  );
}
